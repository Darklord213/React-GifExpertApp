{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","propType","PropTypes","func","isRequired","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sNAGMA,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAEjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaF,OACM,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAc,SAAAS,GAAG,OAAIP,GAAJ,mBAAkBO,OACnCN,EAAc,MAKd,SACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,QAiBnBG,YAAY,wBAMxBf,EAAYgB,SAAS,CACjBf,cAAegB,IAAUC,KAAKC,YAGnBnB,Q,+BCjCFoB,EAAM,uCAAC,WAAOC,GAAP,uBAAAC,EAAA,6DAEVC,EAFU,iDAEoCC,UAAUH,GAF9C,+DAGEI,MAAMF,GAHR,cAGVG,EAHU,gBAIGA,EAAKC,OAJR,uBAITC,EAJS,EAITA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GACf,IAAD,EACI,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAIlDa,QAAQC,IAAIR,GAfQ,kBAgBbA,GAhBa,4CAAD,sDCCNS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACC,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCAHS,EAAQ,SAAC,GAAe,IAAdrB,EAAa,EAAbA,SAQnB,ECTwB,SAACA,GAE1B,MAA0BnB,mBAAS,CAC/B0B,KAAK,GACLe,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBDC,qBAAU,WACR1B,EAAOC,GAAU0B,MAAK,SAAAC,GACdH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAKnB,CAACtB,IASIuB,EDhBuBK,CAAa5B,GAA9Ba,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAIpB,OACA,qCACI,6BAAKtB,IACJsB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACSL,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEMZkB,EA5BK,WAGhB,MAAoChD,mBAAS,CAAC,cAA9C,mBAAOiD,EAAP,KAAmBlD,EAAnB,KAOA,OACI,qCACA,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQkD,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CACAA,SAAUA,GADIA,Y,MCjBlC+B,IAASC,OACP,cAAC,EAAD,IAAmBC,SAASC,eAAe,W","file":"static/js/main.b628d270.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory=({ setcategories })=> {\r\n    \r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputText=(e)=>{\r\n        setinputValue(e.target.value)\r\n    }\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        //console.log(setcategories);\r\n        if (inputValue.trim().length > 2){\r\n        setcategories(cat=>[ inputValue,...cat]);// al poner el inputvalue primero lo que hacemos es que muestre primero la ultima busqueda\r\n        setinputValue('');\r\n        }\r\n    }\r\n\r\n  return (\r\n        <form onSubmit={handleSubmit}>\r\n        <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputText}\r\n            placeholder=\"Ingrese un Texto\"\r\n            /> \r\n        \r\n        </form>\r\n    )\r\n}\r\nAddCategory.propType={\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n\r\n","\r\nexport const getGif=async (category)=>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=glDw44pyHQB7gz2Ub0CMs97L4JR6tWld`;\r\n    const resp= await fetch(url);\r\n    const {data}=await resp.json();\r\n    \r\n    const gifs=data.map(img =>\r\n        {\r\n            return {\r\n                id:img.id,\r\n                title:img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n    })\r\n\r\nconsole.log(gifs);\r\nreturn gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n       return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import {useState, useEffect } from 'react'\r\n//import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid=({category})=> {\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    /* useEffect(()=>{\r\n       getGif(category).then(imgs=>setImages(imgs))\r\n    },[category]);// se usa un arreglo vacio para que solo se dispare una vez la renderizacion o petecion http\r\n    // sepone como dependencia category ya que si esta cambia se volveria a renderizar todo de nuevo */\r\n    const {data:images, loading}=useFetchGifs(category); //images es el alias\r\n    /* console.log(data);\r\n    console.log(loading); */\r\n    \r\n    return (\r\n    <>\r\n        <h3>{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n        <div className=\"card-grid\">\r\n                {images.map(img=>(\r\n                  <GifGridItem \r\n                  key={img.id}\r\n                  {...img} />//pasamos un objeto entero para ser destructurado\r\n                ))}\r\n            \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","//Custom Hooks\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n   const [state, setstate] = useState({\r\n       data:[],\r\n       loading:true\r\n   });\r\n\r\n  useEffect(()=>{\r\n    getGif(category).then(imgs=>{      \r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            })  \r\n       \r\n       \r\n    })\r\n  }, [category]);//se dispara solo si category cambia\r\n\r\n//    setTimeout(() => {\r\n//        setstate({\r\n//         data:[1,2,3,4,5,6,7],\r\n//         loading:false })\r\n       \r\n//    }, 3000);\r\n\r\n   return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory  from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GiftExpertApp=()=>{\r\n    \r\n    //const categories=['Punchi ', 'Samurai ', 'Dragon Ball'];\r\n    const [categories, setcategories] = useState(['One Punch'])\r\n    \r\n    /* const agregar=()=>{\r\n        setcategories([...categories,'Camilo Adrian ']);\r\n        \r\n    } */ \r\n\r\n    return(\r\n        <>\r\n        <h2>GiftExpertApp</h2>\r\n        <AddCategory setcategories={setcategories}  />\r\n        <hr/>\r\n        <ol> \r\n            {\r\n                categories.map(category=>(\r\n                    <GifGrid key={category} \r\n                    category={category} />\r\n                    \r\n                ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GiftExpertApp;\r\n\r\n ///* {categories.map((category)=>{\r\n             //   return <li key={category}>{category}</li> \r\n            //}) }   */ ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GiftExpertApp />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}